QUESTIONS:
1) is there an example i can test the z rules in subst with?

5) !!do we just have an exception be a Raise if you try to add non-nums?
6) rules for conditionals?

8)!!!! stack overflow
9) instructions for env module

Answered:
XX 2) fresh var is there a specific thing it should be?
XX 3) do we need to check that everything is an Num to do binop or unop subst?
XX 4) are the only binops + - * = < ? we dont need a divide?
XX 7) how to test subst if it outputs an env?

eval error something goes wrong in my program in my code
do a raise when code should raise an exception

conditionals:
if has to be bool!!
  only if t then second else if f then third

test free_vars
test subst
subst
eval_s LOOK AT LAB9!!!! make sure to accound for unbound var
test eval_s
fill out the Env module
eval_d
test eval_d
extension (eval_l)
writeup
clean up design by far on the string ones

next: test substitution (do the unit testing framework, use the tests
  from lab and the textbook and ed)



exp match 
 match exp with
  | Var x -> 
  | Num x -> 
  | Bool x -> 
  | Unop (x, y) ->
  | Binop (b, x, y) -> 
    (match b with
      | Plus -> 
      | Minus ->
      | Times -> 
      | Equals -> 
      | LessThan-> 
  | Conditional (i, t, e) -> 
  | Fun (v, e) -> 
  | Let (v, e1, e2) -> 
  | Letrec (v, e1, e2) -> 
  | Raise -> 
  | Unassigned ->
  | App (e1, e2) -> 




  letrec notes:

