QUESTIONS:
1) how to do letrec in eval_d? pg 419
2) !! letrec for eval_s / subst!? is it in free_vars? in subst? can't figure it out? 
3) ! the z rule for subst!! specifically my failing test
4) eval_s basic 1: negation acting weird
1) is there an example i can test the z rules in subst with?


Unassigned
letrec eval_d
in subst leave it be
evaluation eval_s raise error

Answered:
XX 1) !!! typing for eval_d how to think through
XX 2) fresh var is there a specific thing it should be?
XX 3) do we need to check that everything is an Num to do binop or unop subst?
XX 4) are the only binops + - * = < ? we dont need a divide?
XX 7) how to test subst if it outputs an env?
XX 6) rules for conditionals?
XX 5) do we just have an exception be a Raise if you try to add non-nums?
XX 9) instructions for env module



eval error something goes wrong in my program in my code
do a raise when code should raise an exception

conditionals:
if has to be bool!!
  only if t then second else if f then third

eval_d !! types???
extension (eval_l)
fix letrec on eval_s
writeup
clean up design by far on the string ones

done but need testing:
eval_s
subst
free_vars ((lab 9 exercise 11!!))
env module

 issues:
  eval_s letrec 
  subst z ruled
  negation being weird eval s basic 1 test

exp match 
 match exp with
  | Var x -> 
  | Num x -> 
  | Bool x -> 
  | Unop (x, y) ->
  | Binop (b, x, y) -> 
    (match b with
      | Plus -> 
      | Minus ->
      | Times -> 
      | Equals -> 
      | LessThan-> 
  | Conditional (i, t, e) -> 
  | Fun (v, e) -> 
  | Let (v, e1, e2) -> 
  | Letrec (v, e1, e2) -> 
  | Raise -> 
  | Unassigned ->
  | App (e1, e2) -> 




  letrec notes:

