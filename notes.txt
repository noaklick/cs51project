QUESTIONS:
3) ! how do i print the environment of just a value as per 2:42 in the video? 
4) my tests that fail but seem fine: negation and the fresh_var
5) is it reasonable how i do eval_l?

Before OH:
design: eval_d, subst, string

left to do:
  float
  writeup
  subst design (have a helper that substs with varname and repl)
  clean up design by far on the string ones
  go through and check that i'm following EACH RULE and didn't accidentally get a few mixed up
    do some more eval_l tests to be totally sure

done but need testing:
  subst
  free_vars ((lab 9 exercise 11!!))
  env module

done and tested :)
  eval_d
  eval_s
  eval_l

 issues:
  closure printing on eval_d
  subst z rules
  negation being weird eval s basic 1 test

done before oh:
x identify where the issue is in eval_s/subst letrec 
x have a full draft of lexical
x test dynamic
x test lexical

Answered:
XX 3) ! the z rule for subst!! specifically my failing test. am i doing it right or are my strings just weird?
    a) is there an example i can test the z rules in subst with? i could only find this one and it's from the test.
    we never used this rule in lab and none of the textbook questions have solutions.
4) ! eval_s basic 1: negation acting weird
XX 1) how to do letrec in eval_d? pg 419
XX 1) !!! typing for eval_d how to think through
XX 2) fresh var is there a specific thing it should be?
XX 3) do we need to check that everything is an Num to do binop or unop subst?
XX 4) are the only binops + - * = < ? we dont need a divide?
XX 7) how to test subst if it outputs an env?
XX 6) rules for conditionals?
XX 5) do we just have an exception be a Raise if you try to add non-nums?
XX 9) instructions for env module
XX 1) !! conditionals in eval_d not working (see intofbool)
    example to show: let intofbool = fun b -> if b then 1 else 0 in intofbool true;;
XX 2) !! letrec for all eval  / subst!? 
  is it in conditonals? free_vars? in subst? can't figure it out? 
    example to show: let rec fact = fun n -> if n = 0 then 1 else n * fact (n-1) in fact 10;;


what do eval_l and eval_d share?
  binop
  unop
  num 
  bool 
  conditional 
  let?
  letrec
  raise
  unassigned

NOT
  VAR
  FUN
  APP



eval_l:
To fix the dynamic semantics,
we need to handle function values differently. When a function value
is computed (say the value of f, fun y -> x + y), we need to keep
track of the lexical environment in which the function occurred so
that when the function is eventually applied to an argument, we
can evaluate the application in that lexical environment – 
the environment when the function was defined – rather than the dynamic
environment – the environment when the function was called.
The technique to enable this is to package up the function being
defined with a snapshot of the environment at the time of its definition 
into a closure. There is already provision for closures in the env
module. You’ll notice that the value type has two constructors, one
for normal values (like numbers, booleans, and the like) and one for
closures. The Closure constructor just packages together a function
with its lexical environment.
Stage 8 (if you decide to do a lexically scoped evaluator in service
of your extension) Make a copy of your eval_d evaluation function
and call it eval_l (the ‘l’ for lexically scoped environment semantics). 
Modify the code so that the evaluation of a function returns a
closure containing the function itself and the current environment.
Modify the function application part so that it evaluates the body of
the function in the lexical environment from the corresponding closure
(appropriately updated). As usual, test it thoroughly. If you’ve carefully
accumulated good unit tests for the previous evaluators, you should be
able to fully test this new one with just a single function call.
Do not just modify eval_d to exhibit lexical scope, as this will cause
our unit tests for eval_d (which assume that it is dynamically scoped)
to fail. That’s why we ask you to define the lexically scoped evaluator
as eval_l. The copy-paste recommendation for building eval_l from
eval_d makes for simplicity in the process, but will undoubtedly leave
you with redundant code. Once you’ve got this all working, you may
want to think about merging the two implementations so that they
share as much code as possible. Various of the abstraction techniques
you’ve learned in the course could be useful here. 





exp match 
 match exp with
  | Var x -> 
  | Num x -> 
  | Bool x -> 
  | Unop (x, y) ->
  | Binop (b, x, y) -> 
    (match b with
      | Plus -> 
      | Minus ->
      | Times -> 
      | Equals -> 
      | LessThan-> 
  | Conditional (i, t, e) -> 
  | Fun (v, e) -> 
  | Let (v, e1, e2) -> 
  | Letrec (v, e1, e2) -> 
  | Raise -> 
  | Unassigned ->
  | App (e1, e2) -> 

  misc notes:
    eval error something goes wrong in my program in my code
    do a raise when code should raise an exception

    conditionals:
    if has to be bool!!
      only if t then second else if f then third

    testing differences: see pg 424


    Unassigned
    letrec eval_d
    in subst leave it be
    evaluation eval_s raise error

  letrec notes:

